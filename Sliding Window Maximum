class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        vector <int> answer;
        deque <int> q;
        
        int start = 0, end = 0;
        
        while(end < nums.size())
        {
            //calculating the window size
            int window_size = end - start + 1;
            
            //if deque is empty
            if(q.empty()){
                q.push_back(nums[end]);
            }
            else{
                //if the current element is greater than the element in deque, then we are popping because, the current element is max, and that would be seleced instead of its smaller elements
                while(!q.empty() && q.back() < nums[end])
                    q.pop_back();
                
                q.push_back(nums[end]);
            }
            
            if(window_size == k)
            {
                answer.push_back(q.front());
                
                //popping the elements which are removed from sliding window
                if(q.front() == nums[start]){
                    q.pop_front();
                }
                
                start++;
            }
            
            end++;
        }
        
        return answer;
    }
};
