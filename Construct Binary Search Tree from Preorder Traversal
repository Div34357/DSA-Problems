class Solution {
private:
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder, unordered_map <int, int> &m, int &index, int start, int end) 
    {
        if(start > end || index >= inorder.size()) {
            return NULL;
        }
        
        int element = preorder[index++];
        
        int elementIndexInInorder = m[element];
        
        TreeNode* newNode = new TreeNode(element);
        
        newNode->left = buildTree(preorder, inorder, m, index, start, elementIndexInInorder - 1);
        newNode->right = buildTree(preorder, inorder, m, index, elementIndexInInorder + 1, end);
        
        return newNode;
    }

public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector <int> inorder(preorder.begin(), preorder.end());
        unordered_map <int, int> m;
        int n = inorder.size(), index = 0, start = 0, end = n - 1;
        
        sort(inorder.begin(), inorder.end());
        
        for(int i = 0 ; i < n; i++) {
            m[inorder[i]] = i;
        }
        
        return buildTree(preorder, inorder, m, index, start, end);
    }
};
