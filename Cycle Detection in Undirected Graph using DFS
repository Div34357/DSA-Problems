#include<bits/stdc++.h>

void create_adj_list(unordered_map <int, vector <int>> &adjList, vector<vector<int>>& edges)
{
    for(auto &edge : edges)
    {
        int u = edge[0];
        int v = edge[1];

        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
}

bool bfs(unordered_map <int, vector <int>> &adjList, unordered_map <int, bool> &isVisited, int num, int parent)
{
    isVisited[num] = true;

    for(auto node : adjList[num]){
        if(!isVisited[node]){
           bool isCyclePresent = bfs(adjList, isVisited, node, num);
            if(isCyclePresent){
                return true;
            }
        }
        else if(node != parent){
            return true;
        }
    }

    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map <int, vector <int>> adjList;
    unordered_map <int, bool> isVisited;

    //creating Adjacency List
    create_adj_list(adjList, edges);

    //checking for cycle in each and every component of the graph
    for(int i = 1; i <= n; i++)
    {
        if(!isVisited[i])
        {
            bool isCyclePresent = bfs(adjList, isVisited, i, -1);
            
            if(isCyclePresent){
                return "Yes";
            }
        }
    }

    return "No";
}
